media_3 <- 162
media_4 <- 178
#para 162
g3 <- g3 + stat_function(fun = dnorm,
args = list (mean = media_3, sd = SE),
colour = "blue", size = 1)
x1 <- seq (75 * SE, 95 * SE, 0.01)
y1 <- dnorm (x, mean = media_3 , sd = SE)
g3 <- g3 + geom_area (data = subset (data.frame (x1, y1),
x < media_3),
aes ( x = x1 , y = y1 ),
colour = " blue ",
fill = " blue ",
alpha = 0.5)
g3 <- g3 + geom_area (data = subset (data.frame (x1, y1) ,
x > media_4 ),
aes(x = x1 , y = y1) ,
colour = " blue ",
fill = " blue ",
alpha = 0.5)
#para 178
g3 <- g3 + stat_function(fun = dnorm,
args = list (mean = media_4, sd = SE),
colour = "blue", size = 1)
x2 <- seq (75 * SE, 95 * SE, 0.01)
y2 <- dnorm (x, mean = media_4 , sd = SE)
g3 <- g3 + geom_area (data = subset (data.frame (x2, y2),
x < media_3),
aes ( x = x2 , y = y2 ),
colour = " blue ",
fill = " blue ",
alpha = 0.5)
g3 <- g3 + geom_area (data = subset (data.frame (x2, y2) ,
x > media_4),
aes(x = x2 , y = y2) ,
colour = " blue ",
fill = " blue ",
alpha = 0.5)
#Se muestra el gráfico
print(g3)
#Gráfico "alternativo" sobre poder estadístico
efecto <- seq(-8, 8, 0.01)
poder_efecto <- power.t.test ( n = n_muestra ,
delta = efecto ,
sd = desEstandar ,
sig.level = prob_total,
power = NULL,
type = "one.sample",
alternative = "two.sided")
datos <- data.frame(efecto,poder_efecto$power)
g3_alt <- ggplot(datos, aes(efecto, poder_efecto$power))
g3_alt <- g3_alt + geom_line ()
g3_alt <- g3_alt + ylab ("Poder estadístico ")
g3_alt <- g3_alt + xlab ("Tamaño del efecto ")
g3_alt <- g3_alt + theme_pubr()
g3_alt <- g3_alt + ggtitle("Curva de poder para prueba bilateral")
g3_alt <- g3_alt + geom_vline (xintercept = 0, linetype = "dashed")
#se imprime el gráfico
print(g3_alt)
#Daniel Jara 20.113.716-0
#Benjamín Jorquera 19.182.719-8
#Sebastian Astete 18.562.196-0
#Joaquin Torres 19.091.702-9
#OBSERVACIONES:
#-En la rubrica en la parte de datos dice que se obtienen en formato largo y tambien ancho... puede que sea algo general (onda otro grupo tuvo que hacer eso)
#-Faltan las condiciones
#Se importa el paquete y se instala de ser necesario
if (!require(tidyverse)){
install.packages("tidyverse", dependencies = TRUE )
require (tidyverse)
}
if (!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE )
require (ggpubr)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(datasets)){
install.packages("datasets", dependencies = TRUE )
require (datasets)
}
if (!require(DescTools)){
install.packages("DescTools", dependencies = TRUE )
require (DescTools)
}
#Verificación de condiciones iniciales
#1. La escala con que se mide la variable dependiente tiene las propiedades de una escala de intervalos iguales.
#2. Las k muestras son obtenidas de manera aleatoria e independiente desde la(s) población(es) de origen.
#3. Se puede suponer razonablemente que la(s) población(es) de origen sigue(n) una distribución normal.
#4. Las k muestras tienen varianzas aproximadamente iguales.
#Planteamiento de hipótesis
#H0: la efectividad de los diferentes suplementos es igual para los cuatro grupos
#H1: la efectividad de los diferentes suplementos es diferente para al menos un grupo
#Considerando un nivel significancia igual a  0.05
alfa <- 0.05
#se cargan los datos
pollos <- chickwts
#se realiza la prueba ANOVA
prueba <- aov(weight~feed, data = pollos)
print (summary (prueba))
#Respuesta: Obteniendo un valor de p = 5.94e-10 < alfa, se rechaza la hipótesis nula en favor de la alternativa, concluyendo de que existe al menos
#           un grupo de suplementos diferente en efectividad (para identificar cual se debe realizar un análisis post hoc)
#Análisis post hoc: se utilizara la Prueba de comparación de Scheffé sin entregar los argumentos which y contrasts, por lo que o únicamente se
#contrastan todos los pares
pruebaSch <- ScheffeTest (x = prueba,
conf.level = 1 - alfa
)
print (pruebaSch)
# Prueba HSD de Tukey .
post_hoc <- TukeyHSD (prueba,
"feed",
ordered = TRUE,
conf.level = 1 - alfa)
print(post_hoc)
# Prueba HSD de Tukey .
post_hoc <- TukeyHSD (prueba,
"feed",
ordered = TRUE,
conf.level = 1 - alfa)
print(post_hoc)
pruebaSch <- ScheffeTest (x = prueba,
conf.level = 1 - alfa
)
print (pruebaSch)
# Prueba HSD de Tukey .
post_hoc <- TukeyHSD (prueba,
"feed",
ordered = TRUE,
conf.level = 1 - alfa)
print(post_hoc)
plot(TukeyHSD(prueba, "feed"))
View(pollos)
View(pollos)
tapply(pollos$weight, pollos$feed, sd)
bartlett.test(pollos$weight, pollos$feed)
source("~/Usach/IME/Material Repo PEP1/Ejercicios practicos/Actividad 5/EP-05-respuesta-sala-6.R", encoding = 'UTF-8')
source("~/Usach/IME/Material Repo PEP1/Ejercicios practicos/Actividad 4/EP04-respuesta-sala-6.R", encoding = 'UTF-8')
# Diego Alvarado 20.283.543-0
# Daniel Jara 20.113.716-0
#Se importa el paquete y se instala de ser necesario
if (!require(dplyr)){
install.packages("dplyr", dependencies = TRUE )
require (dplyr)
}
if (!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE )
require (ggpubr)
}
if (!require(TeachingDemos)){
install.packages("TeachingDemos", dependencies = TRUE )
require (TeachingDemos)
}
#**************************** Pregunta 1 ***************************************
# El artículo Automatic Segmentation of Medical Images Using Image Registration: Diagnostic and
# Simulation Applications” (Journal of Medical Engeeniering and Technology 2005) propuso una nueva
# técnica para la identificación automática de los bordes de estructuras significativas en una imagen médica
# utilizando desplazamiento lineal promedio (ALD, por sus siglas en inglés). El artículo dio las siguientes
# observaciones de ALD con una muestra de 49 riñones (en pixeles y usando punto en vez de coma
#                                                     decimal):
# 1.38 1.28 1.09 1.07 0.96 1.28 0.91 1.49 1.11 0.66 1.14 1.13 0.91 0.94 1.30
# 0.87 0.73 0.92 1.00 1.05 1.12 1.10 0.95 1.29 0.86 0.96 0.94 1.45 1.12 1.06
# 0.71 0.88 0.96 1.14 1.03 0.89 0.81 1.04 1.15 0.75 1.12 1.01 1.11 0.64 1.25
# 0.68 1.44 1.28 1.21
# Los autores comentaron que el ALD medio sería menor a un 1.0 pixel. ¿Los datos soportan esta
# afirmación?
#RESPUESTA:
#Se cargan los datos
texto <- "1.38 1.28 1.09 1.07 0.96 1.28 0.91 1.49 1.11 0.66 1.14 1.13 0.91 0.94 1.30 0.87 0.73 0.92 1.00 1.05 1.12 1.10 0.95 1.29 0.86 0.96 0.94 1.45 1.12 1.06 0.71 0.88 0.96 1.14 1.03 0.89 0.81 1.04 1.15 0.75 1.12 1.01 1.11 0.64 1.25 0.68 1.44 1.28 1.21"
file <- textConnection(texto)
datos <- scan(file)
#Se empleará la prueba Z, y cumple con las condiciones. A continuación se demuestran.
# 1. Tamaño de la muestra: es mayor a 30, en este caso son 49
# 2. Observaciones independientes: son independiente porque son imágenes médicas escogidas de manera automática (aleatoria).
# 3. Sigue aproximadamente una distribución normal: para esto se realizará el gráfico Q-Q
datosQQ <- data.frame(datos)
g <- ggqqplot(datosQQ, x="datos", color="SteelBlue")
print(g)
#Como con el gráfico presenta valores atípicos, se procede a realizar la prueba de Shapiro-Wilk
pruebaN <- shapiro.test(datos)
print(pruebaN)
#Daniel Jara 20.113.716-0
#Benjamín Jorquera 19.182.719-8
#Sebastian Astete 18.562.196-0
#Joaquin Torres 19.091.702-9
#OBSERVACIONES:
#-En la rubrica en la parte de datos dice que se obtienen en formato largo y tambien ancho... puede que sea algo general (onda otro grupo tuvo que hacer eso)
#-Faltan las condiciones
#Se importa el paquete y se instala de ser necesario
if (!require(tidyverse)){
install.packages("tidyverse", dependencies = TRUE )
require (tidyverse)
}
if (!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE )
require (ggpubr)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(datasets)){
install.packages("datasets", dependencies = TRUE )
require (datasets)
}
if (!require(DescTools)){
install.packages("DescTools", dependencies = TRUE )
require (DescTools)
}
#Verificación de condiciones iniciales
#1. La escala con que se mide la variable dependiente tiene las propiedades de una escala de intervalos iguales.
#2. Las k muestras son obtenidas de manera aleatoria e independiente desde la(s) población(es) de origen.
#3. Se puede suponer razonablemente que la(s) población(es) de origen sigue(n) una distribución normal.
#4. Las k muestras tienen varianzas aproximadamente iguales.
#Planteamiento de hipótesis
#H0: la efectividad de los diferentes suplementos es igual para los cuatro grupos
#H1: la efectividad de los diferentes suplementos es diferente para al menos un grupo
#Considerando un nivel significancia igual a  0.05
alfa <- 0.05
#se cargan los datos
pollos <- chickwts
#se realiza la prueba ANOVA
prueba <- aov(weight~feed, data = pollos)
print (summary (prueba))
#Respuesta: Obteniendo un valor de p = 5.94e-10 < alfa, se rechaza la hipótesis nula en favor de la alternativa, concluyendo de que existe al menos
#           un grupo de suplementos diferente en efectividad (para identificar cual se debe realizar un análisis post hoc)
#Análisis post hoc: se utilizara la Prueba de comparación de Scheffé sin entregar los argumentos which y contrasts, por lo que o únicamente se
#contrastan todos los pares
pruebaSch <- ScheffeTest (x = prueba,
conf.level = 1 - alfa
)
print (pruebaSch)
#Respuesta:
#Analizando la tabla entregada por la prueba de comparación de Scheffé, se puede concluir con un nivel de significancia igual a 0.05 que
#redactar respuesta con esto
#https://www.r-bloggers.com/2021/08/how-to-perform-tukey-hsd-test-in-r/
#P3 vs P1 and P3 vs P2 are significantly different at the 95 percent confidence level, according to the Tukey HSD test.
#el suplemento
#horsebean es el que presenta mayor variabilidad.
# Prueba HSD de Tukey .
post_hoc <- TukeyHSD (prueba,
"feed",
ordered = TRUE,
conf.level = 1 - alfa)
print(post_hoc)
plot(TukeyHSD(prueba, "feed"))
#para probar la Homocedasticidad
tapply(pollos$weight, pollos$feed, sd)
bartlett.test(pollos$weight, pollos$feed) #con el p value se falla en rechazar h0, por lo que no hay evidencia en contra de Homocedasticidad
#para probar normalidad
pruebaN <- shapiro.test(pollos$weight)
print(pruebaN)
#Daniel Jara 20.113.716-0
#Benjamín Jorquera 19.182.719-8
#Sebastian Astete 18.562.196-0
#Joaquin Torres 19.091.702-9
#OBSERVACIONES:
#-En la rubrica en la parte de datos dice que se obtienen en formato largo y tambien ancho... puede que sea algo general (onda otro grupo tuvo que hacer eso)
#-Faltan las condiciones
#Se importa el paquete y se instala de ser necesario
if (!require(tidyverse)){
install.packages("tidyverse", dependencies = TRUE )
require (tidyverse)
}
if (!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE )
require (ggpubr)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(datasets)){
install.packages("datasets", dependencies = TRUE )
require (datasets)
}
if (!require(DescTools)){
install.packages("DescTools", dependencies = TRUE )
require (DescTools)
}
#Carga de datos
alfa <- 0.05
#se cargan los datos
pollos <- chickwts
#se realiza la prueba ANOVA
prueba <- aov(weight~feed, data = pollos)
print (summary (prueba))
#Verificación de condiciones iniciales
#1. La escala con que se mide la variable dependiente tiene las propiedades de una escala de intervalos iguales. --> no se que es esto
#2. Las k muestras son obtenidas de manera aleatoria e independiente desde la(s) población(es) de origen.
#Esto se cumple debido a que en el enunciado se menciona que se realiza un experimento para medir la efectividad de varios suplementos alimenticios
#en la tasa de crecimiento de las aves, separando pollitos recién nacidos en 6 grupos aleatorios y a cada grupo se le dio un suplemento distinto.
#3. Se puede suponer razonablemente que la(s) población(es) de origen sigue(n) una distribución normal.
#Para probar la normalidad se realizara la prueba de shapiro
pruebaN <- shapiro.test(pollos$weight)
print(pruebaN)
View(pollos)
View(pollos)
source("~/Usach/IME/Actividad 8/a.R", encoding = 'UTF-8')
tapply(pollos$weight, pollos$feed, sd)
bartlett.test(pollos$weight, pollos$feed)
pollos2 <- pollos %>% filter(feed == "linseed" | feed == "soybean" | feed == "horsebean" | feed == "meatmeal")
View(pollos2)
View(pollos2)
#Daniel Jara 20.113.716-0
#Benjamín Jorquera 19.182.719-8
#Sebastian Astete 18.562.196-0
#Joaquin Torres 19.091.702-9
#OBSERVACIONES:
#-En la rubrica en la parte de datos dice que se obtienen en formato largo y tambien ancho... puede que sea algo general (onda otro grupo tuvo que hacer eso)
#-Faltan las condiciones
#Se importa el paquete y se instala de ser necesario
if (!require(tidyverse)){
install.packages("tidyverse", dependencies = TRUE )
require (tidyverse)
}
if (!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE )
require (ggpubr)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(datasets)){
install.packages("datasets", dependencies = TRUE )
require (datasets)
}
if (!require(DescTools)){
install.packages("DescTools", dependencies = TRUE )
require (DescTools)
}
#Carga de datos
alfa <- 0.05
#se cargan los datos
pollos <- chickwts
pollos <- pollos %>% filter(feed == "linseed" | feed == "soybean" | feed == "horsebean" | feed == "meatmeal")
View(pollos)
#Daniel Jara 20.113.716-0
#Benjamín Jorquera 19.182.719-8
#Sebastian Astete 18.562.196-0
#Joaquin Torres 19.091.702-9
#OBSERVACIONES:
#-En la rubrica en la parte de datos dice que se obtienen en formato largo y tambien ancho... puede que sea algo general (onda otro grupo tuvo que hacer eso)
#-Faltan las condiciones
#Se importa el paquete y se instala de ser necesario
if (!require(tidyverse)){
install.packages("tidyverse", dependencies = TRUE )
require (tidyverse)
}
if (!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE )
require (ggpubr)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(ez)){
install.packages("ez", dependencies = TRUE )
require (ez)
}
if (!require(datasets)){
install.packages("datasets", dependencies = TRUE )
require (datasets)
}
if (!require(DescTools)){
install.packages("DescTools", dependencies = TRUE )
require (DescTools)
}
#Enunciado
# La avicultura de carne es un negocio muy lucrativo, y cualquier método que ayude al rápido crecimiento de
# los pollitos es beneficioso, tanto para las avícolas como para los consumidores no veganos. En el paquete
# datasets de R (importado nativamente) está el conjunto de datos chickwts con los resultados de un
# experimento hecho (supuestamente en 1948) para medir la efectividad de varios suplementos alimenticios
# en la tasa de crecimiento de las aves, en donde pollitos recién nacidos se separaron aleatoriamente en
# seis grupos, y a cada grupo se le dio un suplemento distinto por seis semanas. Se reportan los pesos, en
# gramos, alcanzados por los pollitos. Para productores de la 7º región, es especialmente importante saber
# si deberían usar suplementos basados en linaza (linseed), soya (soybean), habas (horsebean) o carne
# (meatmeal).
#Carga de datos
alfa <- 0.05
#se cargan los datos
pollos <- chickwts
#se filtrar por los suplementos solicitados en el enunciado
pollos <- pollos %>% filter(feed == "linseed" | feed == "soybean" | feed == "horsebean" | feed == "meatmeal")
#Verificación de condiciones iniciales
#1. La escala con que se mide la variable dependiente tiene las propiedades de una escala de intervalos iguales
#la escala de medida en la cual se mide el peso (gramos) cumple con esta condicion
#2. Las k muestras son obtenidas de manera aleatoria e independiente desde la(s) población(es) de origen.
#Esto se cumple debido a que en el enunciado se menciona que se realiza un experimento para medir la efectividad de varios suplementos alimenticios
#en la tasa de crecimiento de las aves, separando pollitos recién nacidos en 6 grupos aleatorios y a cada grupo se le dio un suplemento distinto.
#3. Se puede suponer razonablemente que la(s) población(es) de origen sigue(n) una distribución normal.
#Para probar la normalidad se realizara la prueba de shapiro
pruebaN <- shapiro.test(pollos$weight)
print(pruebaN)
bartlett.test(pollos$weight, pollos$feed)
#Planteamiento de hipótesis
#H0: la efectividad de los diferentes suplementos es igual para los cuatro grupos
#H1: la efectividad de los diferentes suplementos es diferente para al menos un grupo
#Considerando un nivel significancia igual a  0.05
#se realiza la prueba ANOVA
prueba <- aov(weight~feed, data = pollos)
print (summary (prueba))
pruebaSch <- ScheffeTest (x = prueba,
conf.level = 1 - alfa)
print (pruebaSch)
# Prueba HSD de Tukey .
post_hoc <- TukeyHSD (prueba,
"feed",
ordered = TRUE,
conf.level = 1 - alfa)
print(post_hoc)
plot(TukeyHSD(prueba, "feed"))
contrastes <- matrix(c(1, -1, 0, 0,
1, 0, -1, 0,
1, 0, 0, -1,
0, 1, -1, 0,
0, 1, 0, -1,
0, 0, 1, -1,
1, -0.5, -0.5, -0.5,
-0.5, 1, -0.5, -0.5,
-0.5, -0.5, 1, -0.5,
-0.5, -0.5, -0.5, 1),
nrow = 10,
byrow = TRUE)
contrastes <- t(contrastes)
pruebaSch <- ScheffeTest (x = prueba,
which = "feed",
contrasts = contrastes,
conf.level = 1 - alfa)
print(pruebaSch)
plot(ScheffeTest (x = prueba,
which = "feed",
contrasts = contrastes,
conf.level = 1 - alfa))
pruebaSch <- ScheffeTest (x = prueba,
conf.level = 1 - alfa)
print(pruebaSch)
g2 <- ezPlot(data = datos,
dv = weight,
between = feed,
y_lab = "peso en gramos",
x = feed
)
print(g2)
g2 <- ezPlot(data = pollos,
dv = weight,
between = feed,
y_lab = "peso en gramos",
x = feed
)
print(g2)
g2 <- ezPlot(data = pollos,
dv = weight,
between = feed,
y_lab = "peso en gramos",
x = feed
)
print(g2)
g2 <- ezPlot(data = pollos,
dv = weight,
wid = feed,
between = feed,
y_lab = "peso en gramos",
x = feed
)
print(g2)
g2 <- ezPlot(data = pollos,
dv = weight,
wid = pollos$feed,
between = feed,
y_lab = "peso en gramos",
x = feed
)
print(g2)
pruebaSch <- ScheffeTest (x = prueba,
conf.level = 1 - alfa)
print(pruebaSch)
pollo[["instancia"]] <- factor(1:nrow(pollo))
p <- ezPlot(data = pollo,
dv = weight,
wid = instancia,
between = feed,
x = feed)
print(p)
p <- ezPlot(data = pollo,
dv = weight,
wid = instancia,
between = feed,
x = feed)
print(p)
source("~/Usach/IME/Actividad 8/a.R", encoding = 'UTF-8')
source("~/Usach/IME/Actividad 8/a.R", encoding = 'UTF-8')
source("~/Usach/IME/Actividad 8/a.R", encoding = 'UTF-8')
